"""
Aplicaci√≥n principal del auditor CSV
"""

import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime
from config import CATEGORIAS_CONFIG, CAMPUS_CODES
from validador import leer_csv_con_encoding, auditar_archivo
from gemini_corrector import GeminiCorrector
import re

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Auditor CSV - Actividades Estudiantiles",
    page_icon="üìä",
    layout="wide"
)

def procesar_archivos_categoria(archivos_subidos, categoria):
    """Procesa todos los archivos de una categor√≠a"""
    resultados = []
    archivos_con_problemas = []
    total_correcciones = []
    
    # Inicializar corrector de Gemini
    corrector = GeminiCorrector()
    
    # Inicializar resultados para todos los campus
    for campus in CAMPUS_CODES:
        resultados.append({
            'Campus': campus,
            'En Teams': 'NO',
            'Errores': '',
            'Completo': 'NO',
            'Total Registros': 0,
            'Registros V√°lidos': 0
        })
    
    # Procesar archivos subidos
    for archivo in archivos_subidos:
        try:
            # Intentar leer el archivo con diferentes encodings
            df, encoding_usado, es_utf8, error_lectura = leer_csv_con_encoding(archivo)
            
            if df is None:
                # No se pudo leer el archivo - MOSTRAR ERROR
                st.error(f"‚ùå El archivo '{archivo.name}' no cumpli√≥ los requerimientos:")
                st.error(f"   - No es un archivo CSV v√°lido o no est√° en formato compatible")
                st.error(f"   - Error: {error_lectura}")
                st.error(f"   - Este archivo no ser√° procesado.")
                archivos_con_problemas.append(archivo.name)
                continue
            
            if not es_utf8:
                # Archivo no UTF-8 - MOSTRAR ADVERTENCIA
                st.warning(f"‚ö†Ô∏è El archivo '{archivo.name}' no est√° en formato UTF-8:")
                st.warning(f"   - Encoding detectado: {encoding_usado}")
                st.warning(f"   - Se recomienda convertir el archivo a UTF-8")
                archivos_con_problemas.append(archivo.name)
            
            # Detectar campus del nombre del archivo
            campus_detectado = None
            config = CATEGORIAS_CONFIG[categoria]
            
            if categoria == 'Mentoreo':
                for campus in CAMPUS_CODES:
                    if campus in archivo.name.upper():
                        campus_detectado = campus
                        break
            else:
                match = re.search(config['nombre_archivo_patron'], archivo.name)
                if match:
                    campus_detectado = match.group(1)
            
            # Auditar archivo
            errores, total_registros, registros_validos, correcciones = auditar_archivo(
                df, archivo.name, categoria, encoding_usado, es_utf8, corrector
            )
            
            # Acumular correcciones
            if correcciones:
                total_correcciones.extend([f"{archivo.name}: {corr}" for corr in correcciones])
            
            # Actualizar resultados
            for resultado in resultados:
                if resultado['Campus'] == campus_detectado:
                    resultado['En Teams'] = 'SI'
                    resultado['Total Registros'] = total_registros
                    resultado['Registros V√°lidos'] = registros_validos
                    
                    if errores:
                        errores_filtrados = [e for e in errores if not e.startswith('Archivo no en UTF-8')]
                        
                        if errores_filtrados:
                            resumen_errores = '; '.join(errores_filtrados[:2])
                            if len(resumen_errores) > 150:
                                resumen_errores = resumen_errores[:147] + "..."
                            resultado['Errores'] = resumen_errores
                            resultado['Completo'] = 'NO'
                        else:
                            resultado['Errores'] = 'Solo advertencias de formato'
                            resultado['Completo'] = 'SI'
                    else:
                        resultado['Errores'] = ''
                        resultado['Completo'] = 'SI'
                    break
            
        except Exception as e:
            # Error cr√≠tico - MOSTRAR ERROR
            st.error(f"‚ùå Error cr√≠tico procesando '{archivo.name}': {str(e)}")
            archivos_con_problemas.append(archivo.name)
    
    # Solo mostrar resumen si hubo problemas o correcciones
    if archivos_con_problemas:
        st.info(f"‚ÑπÔ∏è {len(archivos_con_problemas)} archivo(s) requirieron atenci√≥n especial")
    
    if total_correcciones:
        with st.expander(f"ü§ñ Gemini realiz√≥ {len(total_correcciones)} correcciones autom√°ticas"):
            for correccion in total_correcciones[:10]:  # Mostrar solo las primeras 10
                st.write(f"‚Ä¢ {correccion}")
            if len(total_correcciones) > 10:
                st.write(f"... y {len(total_correcciones) - 10} correcciones m√°s")
    
    return pd.DataFrame(resultados)

def crear_excel_reporte(resultados_por_categoria):
    """Crea archivo Excel con m√∫ltiples pesta√±as"""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        for categoria, df in resultados_por_categoria.items():
            nombre_hoja = categoria.replace('/', '_').replace('\\', '_')[:31]
            df.to_excel(writer, sheet_name=nombre_hoja, index=False)
    
    output.seek(0)
    return output

def main():
    st.title("üìä Auditor de Archivos CSV - Actividades Estudiantiles")
    st.markdown("---")
    
    # Configurar API Key de Gemini
    with st.sidebar:
        st.header("üîß Configuraci√≥n")
        api_key = st.text_input(
            "API Key de Gemini:", 
            type="password",
            help="Opcional: Para correcci√≥n ortogr√°fica avanzada"
        )
        if api_key:
            import os
            os.environ['GEMINI_API_KEY'] = api_key
            st.success("‚úÖ API Key configurada")
    
    st.markdown("""
    ### Instrucciones de uso:
    1. (Opcional) Configura tu API Key de Gemini en la barra lateral para correcci√≥n ortogr√°fica avanzada
    2. Selecciona la categor√≠a de archivos que deseas auditar
    3. Sube los archivos CSV correspondientes
    4. Revisa los resultados de la auditor√≠a
    5. Descarga el reporte en Excel
    
    ü§ñ **Con Gemini**: Correcci√≥n inteligente de errores ortogr√°ficos en campos de diccionario
    """)
    
    # Selector de categor√≠a
    categoria_seleccionada = st.selectbox(
        "Selecciona la categor√≠a de archivos:",
        options=list(CATEGORIAS_CONFIG.keys()),
        help="Cada categor√≠a tiene sus propias reglas de validaci√≥n"
    )
    
    st.markdown(f"### Auditor√≠a para: **{categoria_seleccionada}**")
    
    # Mostrar informaci√≥n de la categor√≠a seleccionada
    config = CATEGORIAS_CONFIG[categoria_seleccionada]
    
    with st.expander("Ver configuraci√≥n de validaci√≥n"):
        st.write("**Columnas requeridas:**")
        for col in config['columnas_requeridas']:
            st.write(f"- {col}")
        
        if config['claves_validas']:
            st.write("**Claves v√°lidas:**")
            for clave in config['claves_validas']:
                st.write(f"- {clave}")
        
        st.write("**Validaciones de valores espec√≠ficos:**")
        for campo, valores in config['validaciones_especiales'].items():
            if isinstance(valores, list):
                st.write(f"**{campo}:** (Correcci√≥n autom√°tica disponible)")
                for valor in valores[:5]:
                    st.write(f"  - {valor}")
                if len(valores) > 5:
                    st.write(f"  - ... y {len(valores) - 5} m√°s")
            elif valores is None:
                st.write(f"**{campo}:** No puede estar vac√≠o")
            else:
                st.write(f"**{campo}:** Validaci√≥n especial")
    
    # Subida de archivos
    archivos_subidos = st.file_uploader(
        f"Sube los archivos CSV para {categoria_seleccionada}:",
        type=['csv'],
        accept_multiple_files=True,
        help="Gemini corregir√° autom√°ticamente errores ortogr√°ficos en campos de diccionario"
    )
    
    if archivos_subidos:
        st.success(f"üìÅ {len(archivos_subidos)} archivo(s) cargado(s)")
        
        # Bot√≥n para procesar
        if st.button("üîç Procesar Auditor√≠a", type="primary"):
            with st.spinner("Procesando archivos con Gemini..."):
                # Procesar archivos
                resultados_df = procesar_archivos_categoria(archivos_subidos, categoria_seleccionada)
                
                st.markdown("---")
                st.markdown("### üìä Resultados de la Auditor√≠a")
                
                # M√©tricas resumen
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    campus_con_archivos = len(resultados_df[resultados_df['En Teams'] == 'SI'])
                    st.metric("Campus con archivos", campus_con_archivos)
                
                with col2:
                    campus_completos = len(resultados_df[resultados_df['Completo'] == 'SI'])
                    st.metric("Campus completos", campus_completos)
                
                with col3:
                    total_registros = resultados_df['Total Registros'].sum()
                    st.metric("Total registros", total_registros)
                
                with col4:
                    registros_validos = resultados_df['Registros V√°lidos'].sum()
                    st.metric("Registros v√°lidos", registros_validos)
                
                # Tabla de resultados
                st.dataframe(
                    resultados_df,
                    use_container_width=True,
                    hide_index=True
                )
                
                # Bot√≥n de descarga
                excel_reporte = crear_excel_reporte({categoria_seleccionada: resultados_df})
                
                st.download_button(
                    label="üì• Descargar Reporte Excel",
                    data=excel_reporte,
                    file_name=f"Reporte_Auditoria_{categoria_seleccionada.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    
    # Secci√≥n de auditor√≠a completa
    st.markdown("---")
    st.markdown("### üéØ Auditor√≠a Completa (Todas las Categor√≠as)")
    
    with st.expander("Subir archivos para auditor√≠a completa"):
        archivos_completos = {}
        
        for categoria in CATEGORIAS_CONFIG.keys():
            archivos_categoria = st.file_uploader(
                f"Archivos CSV para {categoria}:",
                type=['csv'],
                accept_multiple_files=True,
                key=f"uploader_{categoria}",
                help=f"Archivos de {categoria}"
            )
            if archivos_categoria:
                archivos_completos[categoria] = archivos_categoria
        
        if archivos_completos:
            if st.button("üöÄ Procesar Auditor√≠a Completa", type="primary"):
                with st.spinner("Procesando todas las categor√≠as con Gemini..."):
                    resultados_completos = {}
                    
                    for categoria, archivos in archivos_completos.items():
                        st.markdown(f"#### Procesando {categoria}...")
                        resultados_completos[categoria] = procesar_archivos_categoria(archivos, categoria)
                    
                    st.markdown("---")
                    st.markdown("### üìä Resumen por Categor√≠a")
                    
                    for categoria, df in resultados_completos.items():
                        with st.expander(f"Resultados - {categoria}"):
                            col1, col2 = st.columns(2)
                            with col1:
                                campus_con_archivos = len(df[df['En Teams'] == 'SI'])
                                st.metric(f"Campus con archivos", campus_con_archivos)
                            with col2:
                                campus_completos = len(df[df['Completo'] == 'SI'])
                                st.metric(f"Campus completos", campus_completos)
                            
                            st.dataframe(df, use_container_width=True, hide_index=True)
                    
                    # Generar Excel completo
                    excel_completo = crear_excel_reporte(resultados_completos)
                    
                    st.download_button(
                        label="üì• Descargar Reporte Completo Excel",
                        data=excel_completo,
                        file_name=f"Reporte_Auditoria_Completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

if __name__ == "__main__":
    main()
